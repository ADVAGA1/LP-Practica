# Generated from .\Expr.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,140,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,13,1,13,1,14,4,14,90,8,14,11,14,12,14,91,1,15,4,15,95,8,15,
        11,15,12,15,96,1,15,5,15,100,8,15,10,15,12,15,103,9,15,1,16,4,16,
        106,8,16,11,16,12,16,107,1,17,4,17,111,8,17,11,17,12,17,112,1,17,
        1,17,1,18,1,18,5,18,119,8,18,10,18,12,18,122,9,18,1,18,1,18,1,19,
        1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,1,0,6,1,0,48,57,1,0,65,90,3,0,48,57,65,90,97,122,
        1,0,97,122,2,0,10,10,32,32,4,0,32,32,48,57,65,90,97,122,145,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,
        0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,58,1,0,0,0,9,61,1,0,0,0,11,66,1,
        0,0,0,13,72,1,0,0,0,15,74,1,0,0,0,17,76,1,0,0,0,19,78,1,0,0,0,21,
        80,1,0,0,0,23,82,1,0,0,0,25,84,1,0,0,0,27,86,1,0,0,0,29,89,1,0,0,
        0,31,94,1,0,0,0,33,105,1,0,0,0,35,110,1,0,0,0,37,116,1,0,0,0,39,
        125,1,0,0,0,41,127,1,0,0,0,43,130,1,0,0,0,45,133,1,0,0,0,47,135,
        1,0,0,0,49,137,1,0,0,0,51,52,5,123,0,0,52,2,1,0,0,0,53,54,5,125,
        0,0,54,4,1,0,0,0,55,56,5,60,0,0,56,57,5,45,0,0,57,6,1,0,0,0,58,59,
        5,105,0,0,59,60,5,102,0,0,60,8,1,0,0,0,61,62,5,101,0,0,62,63,5,108,
        0,0,63,64,5,115,0,0,64,65,5,101,0,0,65,10,1,0,0,0,66,67,5,119,0,
        0,67,68,5,104,0,0,68,69,5,105,0,0,69,70,5,108,0,0,70,71,5,101,0,
        0,71,12,1,0,0,0,72,73,5,94,0,0,73,14,1,0,0,0,74,75,5,42,0,0,75,16,
        1,0,0,0,76,77,5,47,0,0,77,18,1,0,0,0,78,79,5,37,0,0,79,20,1,0,0,
        0,80,81,5,43,0,0,81,22,1,0,0,0,82,83,5,45,0,0,83,24,1,0,0,0,84,85,
        5,40,0,0,85,26,1,0,0,0,86,87,5,41,0,0,87,28,1,0,0,0,88,90,7,0,0,
        0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,30,
        1,0,0,0,93,95,7,1,0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,
        96,97,1,0,0,0,97,101,1,0,0,0,98,100,7,2,0,0,99,98,1,0,0,0,100,103,
        1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,32,1,0,0,0,103,101,1,
        0,0,0,104,106,7,3,0,0,105,104,1,0,0,0,106,107,1,0,0,0,107,105,1,
        0,0,0,107,108,1,0,0,0,108,34,1,0,0,0,109,111,7,4,0,0,110,109,1,0,
        0,0,111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,114,1,0,
        0,0,114,115,6,17,0,0,115,36,1,0,0,0,116,120,5,35,0,0,117,119,7,5,
        0,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,
        0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,124,6,18,0,0,124,38,1,0,
        0,0,125,126,5,62,0,0,126,40,1,0,0,0,127,128,5,62,0,0,128,129,5,61,
        0,0,129,42,1,0,0,0,130,131,5,60,0,0,131,132,5,61,0,0,132,44,1,0,
        0,0,133,134,5,60,0,0,134,46,1,0,0,0,135,136,5,61,0,0,136,48,1,0,
        0,0,137,138,5,33,0,0,138,139,5,61,0,0,139,50,1,0,0,0,7,0,91,96,101,
        107,112,120,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    NUM = 15
    ID = 16
    VAR = 17
    WS = 18
    COMMENT = 19
    GT = 20
    GTE = 21
    LTE = 22
    LT = 23
    EQ = 24
    DIF = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'<-'", "'if'", "'else'", "'while'", "'^'", "'*'", 
            "'/'", "'%'", "'+'", "'-'", "'('", "')'", "'>'", "'>='", "'<='", 
            "'<'", "'='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "NUM", "ID", "VAR", "WS", "COMMENT", "GT", "GTE", "LTE", "LT", 
            "EQ", "DIF" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "NUM", "ID", "VAR", "WS", "COMMENT", "GT", "GTE", "LTE", 
                  "LT", "EQ", "DIF" ]

    grammarFileName = "Expr.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


